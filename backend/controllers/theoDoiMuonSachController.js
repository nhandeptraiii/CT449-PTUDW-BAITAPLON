import TheoDoiMuonSach from '../models/TheoDoiMuonSach.js';
import Sach from '../models/Sach.js';
import DocGia from '../models/DocGia.js';
import mongoose from 'mongoose';

export const getAllMuonSach = async (req, res) => {
  try {
    const muonSachs = await TheoDoiMuonSach.find()
      .populate('MaDocGia', 'MaDocGia HoLot Ten')
      .populate('MaSach', 'MaSach TenSach TacGia')
      .populate('MSNV', 'MSNV HoTenNV')
      .sort({ NgayMuon: -1 });
    res.status(200).json({
      success: true,
      count: muonSachs.length,
      data: muonSachs
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch m∆∞·ª£n s√°ch',
      error: error.message
    });
  }
};

export const getMuonSachById = async (req, res) => {
  try {
    const muonSach = await TheoDoiMuonSach.findById(req.params.id)
      .populate('MaDocGia', 'HoLot Ten DiaChi DienThoai')
      .populate('MaSach', 'TenSach TacGia DonGia NamXuatBan');
    
    if (!muonSach) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n s√°ch'
      });
    }
    
    res.status(200).json({
      success: true,
      data: muonSach
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin phi·∫øu m∆∞·ª£n s√°ch',
      error: error.message
    });
  }
};

export const createMuonSach = async (req, res) => {
  try {
    const { MaDocGia, MaSach, NgayMuon } = req.body; // Nh·∫≠n Ng√†y M∆∞·ª£n t·ª´ frontend

    if (!MaDocGia || !MaSach || !NgayMuon) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin MaDocGia, MaSach ho·∫∑c NgayMuon',
      });
    }

    // Ki·ªÉm tra xem Ng√†y M∆∞·ª£n c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD kh√¥ng
    if (!/^\d{4}-\d{2}-\d{2}$/.test(NgayMuon)) {
      return res.status(400).json({ success: false, message: 'Ng√†y m∆∞·ª£n kh√¥ng h·ª£p l·ªá' });
    }

    // T√¨m ki·∫øm ƒê·ªôc Gi·∫£ & S√°ch
    const docGia = await DocGia.findOne({ MaDocGia });
    const sach = await Sach.findOne({ MaSach });
    const nhanVien = req.nhanVien;

    if (!docGia) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£' });
    }

    if (!sach) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s√°ch' });
    }

    if (sach.SoQuyen <= 0) {
      return res.status(400).json({ success: false, message: 'S√°ch ƒë√£ h·∫øt, kh√¥ng th·ªÉ m∆∞·ª£n' });
      
    }

    // Chuy·ªÉn ƒë·ªïi Ng√†y M∆∞·ª£n t·ª´ string th√†nh ki·ªÉu Date
    const ngayMuonDate = new Date(NgayMuon);
    if (isNaN(ngayMuonDate.getTime())) {
      return res.status(400).json({ success: false, message: 'Ng√†y m∆∞·ª£n kh√¥ng h·ª£p l·ªá' });
    }

    // T·∫°o b·∫£n ghi M∆∞·ª£n S√°ch
    const newMuonSach = new TheoDoiMuonSach({
      MaDocGia: docGia._id,
      MaSach: sach._id,
      MSNV: nhanVien._id,
      NgayMuon: ngayMuonDate, // L∆∞u ng√†y ƒë√∫ng t·ª´ frontend
    });

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s√°ch
    sach.SoQuyen -= 1;
    await sach.save();
    await newMuonSach.save();

    return res.status(201).json({
      success: true,
      message: 'T·∫°o b·∫£n ghi m∆∞·ª£n s√°ch th√†nh c√¥ng',
      data: newMuonSach,
    });
  } catch (error) {
    console.error('L·ªói khi t·∫°o b·∫£n ghi m∆∞·ª£n s√°ch:', error);
    return res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o b·∫£n ghi m∆∞·ª£n s√°ch',
      error: error.message,
    });
  }
};

export const updateMuonSach = async (req, res) => {
  console.log("üì• Request c·∫≠p nh·∫≠t m∆∞·ª£n s√°ch:", req.body);

  try {
    const { NgayTra } = req.body;
    const muonSach = await TheoDoiMuonSach.findById(req.params.id);

    if (!muonSach) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n s√°ch!");
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n s√°ch" });
    }

    console.log("üìå Phi·∫øu m∆∞·ª£n tr∆∞·ªõc c·∫≠p nh·∫≠t:", muonSach);

    // Ki·ªÉm tra n·∫øu ng√†y tr·∫£ nh·ªè h∆°n ng√†y m∆∞·ª£n
    if (NgayTra) {
      const ngayMuon = new Date(muonSach.NgayMuon);
      const ngayTra = new Date(NgayTra);

      if (ngayTra < ngayMuon) {
        console.log("‚ö†Ô∏è Ng√†y tr·∫£ nh·ªè h∆°n ng√†y m∆∞·ª£n!");
        return res.status(400).json({ success: false, message: "‚ö†Ô∏è Ng√†y tr·∫£ kh√¥ng th·ªÉ nh·ªè h∆°n ng√†y m∆∞·ª£n!" });
      }

      if (!muonSach.NgayTra) {
        const sach = await Sach.findById(muonSach.MaSach);
        if (!sach) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch!");
          return res.status(400).json({ success: false, message: "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch!" });
        }

        console.log("üìö S√°ch tr∆∞·ªõc khi c·∫≠p nh·∫≠t:", sach);

        // C·ªông s·ªë s√°ch khi tr·∫£
        await Sach.findByIdAndUpdate(muonSach.MaSach, { $inc: { SoQuyen: 1 } });
        console.log("‚úÖ ƒê√£ c·ªông th√™m 1 quy·ªÉn s√°ch!");
      }
    }

    muonSach.NgayTra = NgayTra || muonSach.NgayTra;
    await muonSach.save();

    console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", muonSach);
    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", data: muonSach });

  } catch (error) {
    console.error("üö® L·ªói c·∫≠p nh·∫≠t:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng", error: error.message });
  }
};



export const returnBook = async (req, res) => {
  console.log("üì• Request c·∫≠p nh·∫≠t m∆∞·ª£n s√°ch:", req.body);

  try {
    let { NgayTra } = req.body;
    const muonSach = await TheoDoiMuonSach.findById(req.params.id);

    if (!muonSach) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n s√°ch!");
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n s√°ch" });
    }

    console.log("üìå Phi·∫øu m∆∞·ª£n tr∆∞·ªõc c·∫≠p nh·∫≠t:", muonSach);

    if (NgayTra) {
      // Chuy·ªÉn ƒë·ªïi NgayTra t·ª´ "DD-MM-YYYY" th√†nh "YYYY-MM-DDT00:00:00.000Z"
      const parts = NgayTra.split("-");
      if (parts.length === 3) {
        NgayTra = new Date(`${parts[2]}-${parts[1]}-${parts[0]}T00:00:00.000Z`);
      } else {
        NgayTra = new Date(NgayTra);
      }

      console.log("üìÖ Ng√†y tr·∫£ sau khi chuy·ªÉn ƒë·ªïi:", NgayTra);

      const ngayMuon = new Date(muonSach.NgayMuon);
      
      if (NgayTra < ngayMuon) {
        console.log("‚ö†Ô∏è Ng√†y tr·∫£ nh·ªè h∆°n ng√†y m∆∞·ª£n!");
        return res.status(400).json({ success: false, message: "‚ö†Ô∏è Ng√†y tr·∫£ kh√¥ng th·ªÉ nh·ªè h∆°n ng√†y m∆∞·ª£n!" });
      }

      if (!muonSach.NgayTra) {
        const sach = await Sach.findById(muonSach.MaSach);
        if (!sach) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y s√°ch!");
          return res.status(400).json({ success: false, message: "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch!" });
        }

        console.log("üìö S√°ch tr∆∞·ªõc khi c·∫≠p nh·∫≠t:", sach);

        // C·ªông s·ªë s√°ch khi tr·∫£
        await Sach.findByIdAndUpdate(muonSach.MaSach, { $inc: { SoQuyen: 1 } });
        console.log("‚úÖ ƒê√£ c·ªông th√™m 1 quy·ªÉn s√°ch!");
      }
    }

    muonSach.NgayTra = NgayTra || muonSach.NgayTra;
    await muonSach.save();

    console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", muonSach);
    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", data: muonSach });

  } catch (error) {
    console.error("üö® L·ªói c·∫≠p nh·∫≠t:", error);
    res.status(500).json({ success: false, message: "‚ö†Ô∏è Ng√†y tr·∫£ kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng DD-MM-YYYY ho·∫∑c DD/MM/YYYY.", error: error.message });
  }
};

export const deleteMuonSach = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è Nh·∫≠n y√™u c·∫ßu x√≥a phi·∫øu m∆∞·ª£n: ${id}`);

    const muonSach = await TheoDoiMuonSach.findById(id);
    if (!muonSach) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n!");
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n" });
    }

    // Ki·ªÉm tra n·∫øu phi·∫øu m∆∞·ª£n ch∆∞a c√≥ ng√†y tr·∫£
    if (!muonSach.NgayTra) {
      const sach = await Sach.findById(muonSach.MaSach);
      if (sach) {
        await Sach.findByIdAndUpdate(muonSach.MaSach, { $inc: { SoQuyen: 1 } });
        console.log("üìö ƒê√£ c·ªông th√™m 1 quy·ªÉn s√°ch v√†o kho!");
      } else {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!");
      }
    }

    await TheoDoiMuonSach.findByIdAndDelete(id);
    console.log("‚úÖ ƒê√£ x√≥a phi·∫øu m∆∞·ª£n!");

    res.status(200).json({ success: true, message: "X√≥a phi·∫øu m∆∞·ª£n th√†nh c√¥ng" });
  } catch (error) {
    console.error("üö® L·ªói x√≥a phi·∫øu m∆∞·ª£n:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng", error: error.message });
  }
};

export const getBorrowingBooks = async (req, res) => {
  try {
    const muonSachs = await TheoDoiMuonSach.find({ NgayTra: undefined })
      .populate('MaDocGia', 'HoLot Ten')
      .populate('MaSach', 'TenSach TacGia')
      .sort({ NgayMuon: -1 });
    
    res.status(200).json({
      success: true,
      count: muonSachs.length,
      data: muonSachs
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch s√°ch ƒëang m∆∞·ª£n',
      error: error.message
    });
  }
};

export const getOverdueBooks = async (req, res) => {
  try {
    const today = new Date();
    const thirtyDaysAgo = new Date(today);
    thirtyDaysAgo.setDate(today.getDate() - 30);
    
    const muonSachs = await TheoDoiMuonSach.find({
      NgayMuon: { $lt: thirtyDaysAgo }
    })
      .populate('MaDocGia', 'HoLot Ten DiaChi DienThoai')
      .populate('MaSach', 'TenSach TacGia')
      .sort({ NgayMuon: 1 });
    
    res.status(200).json({
      success: true,
      count: muonSachs.length,
      data: muonSachs
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch s√°ch qu√° h·∫°n',
      error: error.message
    });
  }
};

export const getBorrowingStatistics = async (req, res) => {
    try {
        const today = new Date();
        const thirtyDaysAgo = new Date(today);
        thirtyDaysAgo.setDate(today.getDate() - 30);
        const totalBorrowings = await TheoDoiMuonSach.countDocuments();
        const activeBorrowings = await TheoDoiMuonSach.countDocuments({ NgayTra: undefined });
        const returnedBorrowings = await TheoDoiMuonSach.countDocuments({ NgayTra });
        const overdueBorrowings = await TheoDoiMuonSach.countDocuments({ NgayMuon: { $lt: thirtyDaysAgo } });
        
        const currentDate = new Date();
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        
        const borrowingsThisMonth = await TheoDoiMuonSach.countDocuments({
            NgayMuon: {
                $gte: firstDayOfMonth,
                $lte: lastDayOfMonth
            }
        });
        
        res.status(200).json({
            success: true,
            data: {
                totalBorrowings,
                activeBorrowings,
                returnedBorrowings,
                overdueBorrowings,
                borrowingsThisMonth
            }
        });
    } catch (error) {
        res.status(500).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ m∆∞·ª£n s√°ch',
        error: error.message
        });
    }
};